  <meta charset="iso-8859-1">
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="Institut d'avaluaciÃ³ i qualitat del sistema educatiu">
  <meta name="author" content="iaqse@iaqse.caib.es">
	<meta name="language" content="cat" />
  
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

	<meta name="robots" content="index,follow">
	<meta name="document-classification" content="Education">
	<meta name="document-type" content="Public">
	<meta name="document-rating" content="Safe for Kids">
	  
	<link rel="icon" href="../css/img/favicon.ico" type="image/x-icon">
	<link rel="shortcut icon" type="image/x-icon" href="../css/img/favicon.ico">	 
	 

  <title>IAQSE</title>
  <link href="iaqse_bundle.min.css" rel="stylesheet">
  <link href="../css/assets/fontawesome/css/all.min.css" rel="stylesheet">
  <script src="iaqse_bundle1.min.js"></script> 
  

<script>
  window.chunker = function(arr, chunkSize) {
      var R = [];
      for (var i=0,len=arr.length; i<len; i+=chunkSize)
           R.push(arr.slice(i,i+chunkSize));
      return R;
  }; 
  window.getURLParameter = function( name ){
      var regexS = "[\\?&]"+name+"=([^&#]*)", 
    regex = new RegExp( regexS ),
    results = regex.exec( window.location.search );
    if(results == null) {
      results = regex.exec( window.location.href);  
    }
    if( results == null ){
        return "";
    } else{
        return decodeURIComponent(results[1].replace(/\+/g, " "));
    }
  };
  window.app = angular.module("iaqse", ["ngRoute", "ngSanitize", "ngAnimate"]);
  app.config(['$sceProvider',function($sceProvider){
    $sceProvider.enabled(false);
  }]);
  app.service("httpService", ["$http", function($http){            
            var service  = {
                loadSchema: function(tableSchema){
                  var request = {
                      method: 'get',
                      url: 'database/' + tableSchema + '.json',
                      dataType: 'json',
                      contentType: "application/json; charset=iso-8859-1"
                  };
                  return $http(request);
                }
            };
            return service;            
  }]);
  window.app.filter("fileName", function(){
        return function(fullPath) {
            var i = fullPath.lastIndexOf("/");
            return fullPath.substring(i+1);
        }
  });
  window.app.filter("icona", function(){
    return function(filename) {
            var extension = filename.substring(filename.lastIndexOf(".")+1).trim().toLowerCase();
            if(extension == "word") {
                return "fa-file-word";
            } else if(extension == "zip" || extension == "rar" ) {
                return "fa-file-archive";
            } else if(extension == "pdf") {
                return "fa-file-pdf";
            } else if(extension == "mp4" || extension == "avi" || extension == "mov" || extension == "qt") {
                return "fa-file-video";
            } else if(extension == "mp3" || extension == "ogg") {
                return "fa-file-audio";
            }

            return "fa-file";
        }
  });
  window.app.config(["$controllerProvider", "$provide", "$compileProvider", "$filterProvider",
       function($controllerProvider, $provide, $compileProvider, $filterProvider) {
    // Since the "shorthand" methods for component
    // definitions are no longer valid, we can just
    // override them to use the providers for post-
    // bootstrap loading.
    // Let's keep the older references.
    app._controller = app.controller;
    app._service = app.service;
    app._filter = app.filter;
    app._component = app.component;
    app._factory = app.factory;
    app._value = app.value;
    app._directive = app.directive;
    app.controller = function(name, constructor) {
      $controllerProvider.register(name, constructor);
      return (this);
    };
    // Provider-based service.
    app.service = function(name, constructor) {
      $provide.service(name, constructor);
      return (this);
    };
    // Provider-based factory.
    app.factory = function(name, factory) {
      $provide.factory(name, factory);
      return (this);
    };
    // Provider-based value.
    app.value = function(name, value) {
      $provide.value(name, value);
      return (this);
    };
    // Provider-based filter.
    app.filter = function(name, filter) {
      $filterProvider.register(name, filter);
      return (this);
    };
    // Provider-based component.
    app.component = function(name, component) {
      $compileProvider.component(name, component);
      return (this);
    };
    // Provider-based directive.
    app.directive = function(name, factory) {
      $compileProvider.directive(name, factory);
      return (this);
    };
  }]);
</script>